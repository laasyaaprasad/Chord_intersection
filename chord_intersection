#pip install sortedcontainers
from sortedcontainers import SortedDict

def count_intersections(radian_measures, chord_identifiers):
    events = []  # List to store start and end events

    # Populate events list with start and end events
    for i, radian in enumerate(radian_measures):
        identifier = chord_identifiers[i]
        if identifier.startswith("s_"):
            events.append((radian, "start", identifier))
        elif identifier.startswith("e_"):
            events.append((radian, "end", identifier))

    events.sort()  # Sort events based on radian measure

    active_chords = SortedDict()  # Balanced BST to store active chords
    intersections = 0

    for radian, event_type, identifier in events:
        if event_type == "start":
            active_chords[identifier] = radian
        elif event_type == "end":
            del active_chords[identifier]
            # Count intersections with chords between start and end
            intersections += len(active_chords)

    return intersections

# Example usage
radian_measures = [0.78, 1.47, 1.77, 3.92]
chord_identifiers = ["s_I", "s_2", "e_1", "e_2"]

result = count_intersections(radian_measures, chord_identifiers)
print(result)

